generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CarStatus {
  DAMAGED
  GOOD_CONDITION
  MAINTENANCE
}

enum DailyCarCondition {
  TIRE
  ENGINE
  BRAKE
  LIGHT
}

model User {
  id                      Int                       @id @default(autoincrement())
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  isActive                Boolean                   @default(true)
  role                    ERole                     @default(DRIVER)
  email                   String?                   @unique
  password                String
  fullName                String
  busStopId               Int?
  zoneId                  Int?
  Admin                   Admin[]
  DailyActivity           DailyActivity[]
  Driver                  Driver?
  Manager                 Manager?
  SubManager              SubManager?
  WeelkyTimeTableActivity WeelkyTimeTableActivity[]
  LeaveSchedule           LeaveSchedule[]
}

model Admin {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
}

model Manager {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  zones     Zone[] // One manager manages multiple zones
}

model Zone {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  zoneName    String
  destination String
  managerId   Int

  manager  Manager   @relation(fields: [managerId], references: [id]) // Many zones belong to one manager
  buses    Bus[]
  busStops BusStop[]
}

model SubManager {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int      @unique
  busStopId Int?     @unique

  user    User     @relation(fields: [userId], references: [id])
  busStop BusStop? @relation(fields: [busStopId], references: [id]) // Only `fields` & `references` here
}

model BusStop {
  id          Int         @id @default(autoincrement())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  busStopName String
  zoneId      Int
  subManager  SubManager? // No `@relation` needed here

  zone  Zone  @relation(fields: [zoneId], references: [id])
  buses Bus[]
}

model Driver {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    EStatus  @default(AVAILABLE)
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
}

model Bus {
  id                      Int                       @id @default(autoincrement())
  plateNo                 String                    @unique
  status                  EStatus                   @default(AVAILABLE)
  zoneId                  Int
  CarStatus               CarStatus                 @default(GOOD_CONDITION)
  zone                    Zone                      @relation(fields: [zoneId], references: [id])
  busStopId               Int
  busStop                 BusStop                   @relation(fields: [busStopId], references: [id])
  DailyActivity           DailyActivity[]
  WeelkyTimeTableActivity WeelkyTimeTableActivity[]
}

model WeelkyTimeTableActivity {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  startOfWeek DateTime
  endOfWeek   DateTime
  dayOfWeek   String
  driverId    Int
  busId       Int
  bus         Bus      @relation(fields: [busId], references: [id])
  driver      User     @relation(fields: [driverId], references: [id])
}

model DailyActivity {
  id                Int                 @id @default(autoincrement())
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  driverId          Int
  busId             Int
  description       String?
  bus               Bus                 @relation(fields: [busId], references: [id])
  driver            User                @relation(fields: [driverId], references: [id])
  CarStatus         CarStatus           @default(GOOD_CONDITION)
  DailyCarCondition DailyCarCondition[]
  carWashStartTime  DateTime? // Time when bus is out of car wash
  busArrivalTime    DateTime? // Time when sub-manager approves arrival
  carWashEndTime    DateTime? // Time when bus is back in car wash
}

model LeaveSchedule {
  id          Int      @id @default(autoincrement())
  driverId    Int
  startOfWeek DateTime
  endOfWeek   DateTime
  leaveDate   DateTime
  driver      User     @relation(fields: [driverId], references: [id])

  @@unique([driverId, startOfWeek]) // Ensures one leave per driver per week
}

enum ERole {
  DRIVER
  ADMIN
  MANAGER
  SUB_MANAGER
}

enum EStatus {
  AVAILABLE
  NOT_AVAILABLE
  APPROVED
}
