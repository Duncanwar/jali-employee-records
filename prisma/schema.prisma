generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      Int                       @id @default(autoincrement())
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  isActive                Boolean                   @default(true)
  role                    ERole                     @default(DRIVER)
  email                   String?                   @unique
  password                String
  fullName                String
  busStopId               Int?
  zoneId                  Int?
  Admin                   Admin[]
  DailyActivity           DailyActivity[]
  Driver                  Driver[]
  Manager                 Manager[]
  BusStop                 BusStop?                  @relation(fields: [busStopId], references: [id])
  Zone                    Zone?                     @relation(fields: [zoneId], references: [id])
  WeelkyTimeTableActivity WeelkyTimeTableActivity[]
  SubManager              SubManager[]
}

model Admin {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

model Manager {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

model SubManager {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

model Driver {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    EStatus  @default(AVAILABLE)
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

model Zone {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  zoneName    String
  destination String
  Bus         Bus[]
  BusStop     BusStop[]
  User        User[]
}

model BusStop {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  busStopName String
  zoneId      Int
  zone        Zone     @relation(fields: [zoneId], references: [id])
  User        User[]
  Bus         Bus[]
}

model Bus {
  id                      Int                       @id @default(autoincrement())
  plateNo                 String                    @unique
  zoneId                  Int
  zone                    Zone                      @relation(fields: [zoneId], references: [id])
  busStopId               Int
  busStop                 BusStop                   @relation(fields: [busStopId], references: [id])
  DailyActivity           DailyActivity[]
  WeelkyTimeTableActivity WeelkyTimeTableActivity[]
}

model WeelkyTimeTableActivity {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  driverId  Int
  busId     Int
  hasLeave  String?
  leaveDate DateTime?
  bus       Bus       @relation(fields: [busId], references: [id])
  driver    User      @relation(fields: [driverId], references: [id])
}

model DailyActivity {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  driverId    Int
  busId       Int
  description String
  bus         Bus      @relation(fields: [busId], references: [id])
  driver      User     @relation(fields: [driverId], references: [id])
}

enum ERole {
  DRIVER
  ADMIN
  MANAGER
  SUB_MANAGER
}

enum EStatus {
  AVAILABLE
  NOT_AVAILABLE
  APPROVED
}
